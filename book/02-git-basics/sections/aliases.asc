[[_git_aliases]]
=== Alias Git

(((aliases)))
Sebelum kita menyelesaikan bab tentang Git dasar ini, hanya ada satu tip kecil yang bisa membuat pengalaman Git Anda lebih sederhana, mudah, dan lebih familiar: alias.
Kami tidak akan merujuk atau menganggap Anda telah menggunakannya di buku ini, tetapi Anda mungkin harus tahu cara menggunakannya.

Git tidak secara otomatis menyimpulkan _command_ Anda jika Anda mengetikkannya secara parsial.
Jika Anda tidak ingin mengetik seluruh teks dari masing-masing _command_ Git, Anda dapat dengan mudah membuat sebuah alias untuk setiap _command_ menggunakan `git config`. (((git commands, config)))
Berikut adalah beberapa contoh yang mungkin ingin Anda siapkan:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Ini berarti, misalnya, sebagai ganti mengetik `git commit`, Anda hanya perlu mengetikkan `git ci`.
Saat Anda terus menggunakan Git, Anda mungkin juga sering menggunakan _command_ lain; jangan ragu untuk membuat alias baru.

Teknik ini juga sangat berguna dalam membuat _command_ yang menurut Anda harus ada.
Misalnya, untuk memperbaiki masalah kegunaan yang Anda hadapi saat melakukan unstaging sebuah file, Anda dapat menambahkan alias unstage  Anda sendiri ke Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Ini akan membuat dua _command_ yang setara dengan:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Hal ini tampaknya sedikit lebih jelas.
Secara umum juga bisa dengan menambahkan _command_ `last`, seperti ini:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Dengan cara ini, Anda bisa melihat _commit_ terakhir dengan mudah:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Seperti yang Anda tahu, Git hanya mengganti _command_ baru dengan alias apapun yang Anda inginkan.
Namun, mungkin Anda ingin menjalankan _command_ eksternal, bukan sub _command_ Git.
Dalam hal ini, Anda memulai _command_ dengan karakter `!`.
Ini berguna jika Anda menulis alat Anda sendiri yang bekerja dengan _repository_ Git.
Kita bisa menunjukkan dengan alias `git visual` untuk menjalankan `gitk`:

[source,console]
----
$ git config --global alias.visual "!gitk"
----
